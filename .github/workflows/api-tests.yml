name: 🚀 JSONPlaceholder API Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_tags:
        description: 'Test tags to run (e.g., @smoke, @posts)'
        required: false
        default: 'not @skip'
      environment:
        description: 'Target environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      parallel_jobs:
        description: 'Number of parallel jobs'
        required: false
        default: '2'

env:
  NODE_VERSION: '18'
  TIMEOUT: 30000
  LOG_LEVEL: info

jobs:
  # Job 1: Smoke Tests (fast feedback)
  smoke-tests:
    name: 🔥 Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: |
          npm ci
          npm run build

      - name: 🏥 Health check
        run: |
          curl -f https://jsonplaceholder.typicode.com/posts/1 || exit 1

      - name: 🔥 Run smoke tests
        run: |
          npm run test:smoke
        env:
          BASE_URL: https://jsonplaceholder.typicode.com
          TAGS: ${{ github.event.inputs.test_tags || '@smoke' }}
          PARALLEL: 1
          GENERATE_HTML_REPORT: true

      - name: 📊 Generate report
        if: always()
        run: npm run report

      - name: 📋 Upload smoke test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: |
            reports/
            logs/
          retention-days: 7

  # Job 2: API Tests (comprehensive testing)
  api-tests:
    name: 🧪 API Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    timeout-minutes: 20
    strategy:
      matrix:
        test-suite: [posts, users, comments]
      fail-fast: false

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🧪 Run ${{ matrix.test-suite }} tests
        run: |
          npm run test:${{ matrix.test-suite }}
        env:
          BASE_URL: https://jsonplaceholder.typicode.com
          TAGS: ${{ github.event.inputs.test_tags || format('@{0}', matrix.test-suite) }}
          PARALLEL: ${{ github.event.inputs.parallel_jobs || '2' }}
          LOG_LEVEL: ${{ env.LOG_LEVEL }}
          TIMEOUT: ${{ env.TIMEOUT }}

      - name: 📊 Generate report
        if: always()
        run: npm run report

      - name: 📋 Upload ${{ matrix.test-suite }} results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test-suite }}-test-results
          path: |
            reports/
            logs/
          retention-days: 7

  # Job 3: E2E Tests (end-to-end scenarios)
  e2e-tests:
    name: 🔄 E2E Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    timeout-minutes: 15
    if: github.event_name != 'schedule' # Skip E2E tests in scheduled runs

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔄 Run E2E tests
        run: |
          npm run test:e2e
        env:
          BASE_URL: https://jsonplaceholder.typicode.com
          TAGS: '@e2e'
          PARALLEL: 1
          LOG_LEVEL: debug

      - name: 📊 Generate report
        if: always()
        run: npm run report

      - name: 📋 Upload E2E results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            reports/
            logs/
          retention-days: 7

  # Job 4: Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: api-tests
    timeout-minutes: 10
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: ⚡ Run performance tests
        run: |
          npm test -- --tags "@performance"
        env:
          BASE_URL: https://jsonplaceholder.typicode.com
          PERFORMANCE_TIMEOUT: 5000
          CONCURRENT_REQUESTS: 5
          LOG_LEVEL: info

      - name: 📊 Generate report
        if: always()
        run: npm run report

      - name: 📋 Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            reports/
            logs/
          retention-days: 30

  # Job 5: Security Tests (if needed)
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    timeout-minutes: 10
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security]')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔒 Run security tests
        run: |
          npm test -- --tags "@validation"
        env:
          BASE_URL: https://jsonplaceholder.typicode.com
          TAGS: '@validation'
          LOG_LEVEL: debug

      - name: 📊 Generate report
        if: always()
        run: npm run report

      - name: 📋 Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-test-results
          path: |
            reports/
            logs/
          retention-days: 30

  # Job 6: Consolidate Results
  consolidate-results:
    name: 📊 Consolidate Test Results
    runs-on: ubuntu-latest
    needs: [smoke-tests, api-tests, e2e-tests]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 📥 Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-results/

      - name: 📊 Consolidate reports
        run: |
          mkdir -p consolidated-reports
          # Copy all HTML reports
          find all-results/ -name "*.html" -exec cp {} consolidated-reports/ \;
          # Copy all JSON reports  
          find all-results/ -name "*.json" -exec cp {} consolidated-reports/ \;
          # Generate consolidated report
          npm run report || true

      - name: 📋 Upload consolidated results
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-results
          path: |
            consolidated-reports/
            reports/
          retention-days: 30

      - name: 📊 Test Results Summary
        run: |
          echo "## 📊 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔥 Smoke Tests | ${{ needs.smoke-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 API Tests | ${{ needs.api-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔄 E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.smoke-tests.result }}" == "failure" ]]; then
            echo "❌ **Critical smoke tests failed!**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Job 7: Notify on Failure (optional)
  notify-on-failure:
    name: 📢 Notify on Failure
    runs-on: ubuntu-latest
    needs: [smoke-tests, api-tests, e2e-tests]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')

    steps:
      - name: 📢 Create Issue on Failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 API Tests Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Test Failure Report
            
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Workflow:** ${{ github.workflow }}
            **Run ID:** ${{ github.run_id }}
            
            ### Failed Jobs:
            - Smoke Tests: ${{ needs.smoke-tests.result }}
            - API Tests: ${{ needs.api-tests.result }}
            - E2E Tests: ${{ needs.e2e-tests.result }}
            
            ### Next Steps:
            1. Review the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Check the test reports in artifacts
            3. Investigate and fix the failing tests
            4. Re-run the workflow after fixes
            
            **Auto-generated by GitHub Actions**
            `;
            
            // Check if issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['test-failure', 'automated']
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['test-failure', 'automated', 'bug']
              });
            }
